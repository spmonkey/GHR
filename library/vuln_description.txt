Host头攻击漏洞：为了方便的获得网站域名，开发人员一般依赖于HTTP Host header，但是这个header是不可信赖的，如果应用程序没有对host header值进行处理，就有可能造成恶意代码的传入。
JavaScript框架库漏洞：JavaScript 框架或库是一组能轻松生成跨浏览器兼容的 JavaScript 代码的工具和函数。如果网站使用了存在漏洞的 JavaScript 框架或库，攻击者就可以利用此漏洞来劫持用户浏览器，进行挂马、XSS、Cookie劫持等攻击。
任意命令执行漏洞：黑客可以直接在Web应用中执行系统命令，从而获取敏感信息或者拿下shell权限，从而控制整个网站甚至控制服务器进一步内网渗透。
服务器端请求伪造漏洞：SSRF (Server-Side Request Forgery,服务器端请求伪造)是一种由攻击者构造请求，由服务端发起请求的安全漏洞。一般情况下，SSRF攻击的目标是外网无法访问的内部系统(正因为请求是由服务端发起的，所以服务端能请求到与自身相连而与外网隔离的内部系统)。
弱口令漏洞：攻击者可通过弱口令进入测试站点后台管理系统，可以修改、删除、添加、查看敏感信息，有可能进一步利用后台上传功能上传web木马，从而获取网站管理权限，甚至是获取整个服务器的最高权限。
开启了 OPTIONS 方法：OPTIONS方法是用于请求获得由Request-URI标识的资源在请求/响应的通信过程中可以使用的功能选项。通过这个方法，客户端可以在采取具体资源请求之前，决定对该资源采取何种必要措施，或者了解服务器的性能。OPTIONS方法可能会暴露一些敏感信息，这些信息将帮助攻击者准备更进一步的攻击。
XML外部实体注入漏洞：攻击者通过向服务器注入指定的 XML 实体内容，从而让服务器按照指定的配置执行，导致问题产生。服务端接收和解析了来自用户端的 XML 数据，又没有做严格的安全控制，从而导致 XXE 漏洞得以被利用，造成任意文件读取、命令执行、内网端口扫描、攻击内网网站、发起 Dos 攻击等危害。
远程代码执行漏洞：代码执行漏洞是指代码未对用户可控参数做过滤，导致直接带入执行代码，通过漏洞执行恶意构造的语句，执行任意代码。攻击者可在服务器上执行任意命令，读写文件操作等，危害巨大。
敏感信息泄露漏洞：网站备份文件或敏感信息文件存放在某个网站目录下，攻击者可通过文件扫描等方法发现并下载该备份文件，导致网站敏感信息泄露。
SQL注入漏洞：Web程序中对于用户提交的参数未做过滤直接拼接到SQL语句中执行，导致参数中的特殊字符破坏了SQL语句原有逻辑，攻击者可以利用该漏洞执行任意SQL语句，如查询数据、下载数据、写入webshell、执行系统命令以及绕过登录限制等。
任意文件读取漏洞：攻击者通过一些手段可以读取服务器上开发者不允许读到的文件。主要读取的文件是服务器的各种配置文件、文件形式存储的密钥、服务器信息（包括正在执行的进程信息）、历史命令、网络信息、应用源码及二进制程序。
任意文件上传漏洞：文件上传漏洞通常由于代码中对文件上传功能所上传的文件过滤不严或web服务器相关解析漏洞未修复而造成的，如果文件上传功能代码没有严格限制和验证用户上传的文件后缀、类型等，攻击者可通过文件上传点上传任意文件，包括网站后门文件（webshell）控制整个网站。
任意用户注册漏洞：由于应⽤在最初设计时由于未考虑全⾯，在登录、注册、找回密码、⽀付模块中程序的判断逻辑及程序的处理流程上存在缺陷，导致攻击者可以绕过程序的处理流程，从⽽达到特定的⽬的。
登录绕过漏洞：由于应⽤在最初设计时由于未考虑全⾯，在登录、注册、找回密码、⽀付模块中程序的判断逻辑及程序的处理流程上存在缺陷，导致攻击者可以绕过程序的处理流程，从⽽达到特定的⽬的。
任意文件下载漏洞：攻击者通过一些手段可以下载服务器上开发者不允许下载的文件。主要下载的文件是服务器的各种配置文件、文件形式存储的密钥、服务器信息（包括正在执行的进程信息）、历史命令、网络信息、应用源码及二进制程序。
任意密码重置漏洞：由于应⽤在最初设计时由于未考虑全⾯，在登录、注册、找回密码、⽀付模块中程序的判断逻辑及程序的处理流程上存在缺陷，导致攻击者可以绕过程序的处理流程，从⽽达到特定的⽬的。
未授权访问漏洞：由于没有对网站敏感页面进行登录状态、访问权限的检查，导致攻击者可未授权访问，获取敏感信息及进行未授权操作。
目录遍历漏洞：由于没有对网站敏感页面进行登录状态、访问权限的检查，导致攻击者可未授权访问，获取敏感信息及进行未授权操作。
反序列化漏洞：反序列化漏洞是指用户可控的数据被网站反序列化。攻击者能够操纵序列化对象，以便将有害数据传递到应用程序的代码当中，甚至可以用完全不同的类的对象替换序列化对象。许多基于反序列化的攻击是在反序列化完成之前完成的。
跨站脚本注入攻击漏洞：跨站脚本攻击（也称为XSS）指利用网站漏洞从用户那里恶意盗取信息。用户在浏览网站、使用即时通讯软件、甚至在阅读电子邮件时，通常会点击其中的链接。攻击者通过在链接中插入恶意代码，就能够盗取用户信息或在终端用户系统上执行恶意代码。
跨站式追踪攻击漏洞：XST攻击是利用服务器的调试方法 Trace 进行用户信息收集的一种攻击，因为 Trace 方法是会导致服务器原样返回客户端发送的内容（cookie，HTTP认证信息等），攻击者将恶意代码嵌入一台已经被控制的主机上的web文件，当访问者浏览时恶意代码在浏览器中执行，然后访问者的cookie、http基本验证以及ntlm验证信息将被发送到已经被控制的主机，同时传送Trace请求给目标主机，导致cookie欺骗或者是中间人攻击。
CORS跨域资源共享漏洞：攻击者可以利用Web应用对用户请求数据包的Origin头校验不严格，诱骗受害者访问攻击者制作好的恶意网站，从而跨域获取受害者的敏感数据，包括转账记录、交易记录、个人身份证号信息、订单信息等等。
URL重定向漏洞：由于目标网站未对程序跳转的URL地址及参数做合法性判断，导致应用程序直接跳转到参数中指定的的URL地址。攻击者可通过将跳转地址修改为指向恶意站点，即可发起网络钓鱼、诈骗甚至窃取用户凭证等。
Tomcat示例目录漏洞：ApacheTomcat默认安装页面中存在examples样例目录。里面存放着Servlets、JSP、WebSocket的一些服务脚本和接口等样例。其中Servletsexamples服务样例下存在一个session的样例。该样例可以允许用户对session来进行操控。因为session是全局通用的，所以也就可以利用该样例下的session来操控管理员的session来进行会话传输操控管理员的账户进行恶意操作。
Apache Multiviews攻击漏洞：Apache 有一个称为“多重视图”的功能部件，缺省情况下，通常都会在特定目录上打开这个功能部件（有时是整个配置都打开这个功能部件）。攻击者可以使用此功能帮助查找站点中的隐藏文件，并可能收集更多敏感信息。